import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Image, ScrollView, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Chore, AdvancedChoreCard as AdvancedChoreCardType, EducationalFact, InspirationalQuote, AgeGroup } from '../../types';
import { choreCardService } from '../../services/choreCardService';
import { educationalContentService } from '../../services/educationalContentService';
import InstructionViewer from './InstructionViewer';
import PerformanceHistory from './PerformanceHistory';
import CertificationBadge from './CertificationBadge';
import QualityRatingInput from './QualityRatingInput';
import EducationalContent from './EducationalContent';

interface Props {\n  chore: Chore;\n  currentUserId: string;\n  userAge?: number;\n  onComplete: (qualityRating: any, satisfactionRating: number, comments?: string, photos?: string[]) => void;\n  onPreferenceUpdate: (rating: number, notes?: string) => void;\n  isCompleting?: boolean;\n  showFullCard?: boolean;\n}\n\nconst AdvancedChoreCard: React.FC<Props> = ({\n  chore,\n  currentUserId,\n  userAge,\n  onComplete,\n  onPreferenceUpdate,\n  isCompleting = false,\n  showFullCard = false\n}) => {\n  const [advancedCard, setAdvancedCard] = useState<AdvancedChoreCardType | null>(null);\n  const [educationalFact, setEducationalFact] = useState<EducationalFact | null>(null);\n  const [inspirationalQuote, setInspirationalQuote] = useState<InspirationalQuote | null>(null);\n  const [showInstructions, setShowInstructions] = useState(false);\n  const [showPerformance, setShowPerformance] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [expandedCard, setExpandedCard] = useState(showFullCard);\n\n  useEffect(() => {\n    loadAdvancedCardData();\n  }, [chore.id]);\n\n  const loadAdvancedCardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Load advanced card data\n      const cardData = await choreCardService.getAdvancedCard(chore.id!);\n      setAdvancedCard(cardData);\n\n      // Determine age group\n      const ageGroup: AgeGroup = userAge && userAge <= 8 ? 'child' : \n                                 userAge && userAge <= 12 ? 'teen' : 'adult';\n\n      // Load educational content\n      const [fact, quote] = await Promise.all([\n        educationalContentService.getRandomFact(ageGroup, chore.type),\n        educationalContentService.getRandomQuote(ageGroup, chore.type, 'encouraging')\n      ]);\n\n      setEducationalFact(fact);\n      setInspirationalQuote(quote);\n    } catch (error) {\n      console.error('Error loading advanced card data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInstructionView = () => {\n    setShowInstructions(true);\n    if (advancedCard) {\n      choreCardService.trackInstructionUsage(chore.id!, currentUserId);\n    }\n  };\n\n  const handleCompletionSubmit = (qualityRating: any, satisfactionRating: number, comments?: string, photos?: string[]) => {\n    // Record detailed completion data\n    const completionData = {\n      choreId: chore.id!,\n      userId: currentUserId,\n      qualityRating,\n      satisfactionRating,\n      timeToComplete: chore.estimatedDuration || 30, // Would track actual time in full implementation\n      comments: comments || '',\n      photos: photos || [],\n      pointsEarned: chore.points,\n      xpEarned: chore.xpReward || chore.points\n    };\n\n    choreCardService.recordCompletion(completionData);\n    onComplete(qualityRating, satisfactionRating, comments, photos);\n  };\n\n  const handlePreferenceUpdate = (rating: number, notes?: string) => {\n    choreCardService.updateChorePreference(currentUserId, chore.id!, rating, notes);\n    onPreferenceUpdate(rating, notes);\n  };\n\n  const getDifficultyColor = () => {\n    switch (chore.difficulty) {\n      case 'easy': return '#10b981';\n      case 'medium': return '#f59e0b';\n      case 'hard': return '#ef4444';\n      default: return '#6b7280';\n    }\n  };\n\n  const getPointsColor = () => {\n    if (chore.points >= 50) return '#be185d';\n    if (chore.points >= 25) return '#f59e0b';\n    return '#10b981';\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Loading advanced card...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Main Card Header */}\n      <TouchableOpacity \n        style={styles.cardHeader}\n        onPress={() => setExpandedCard(!expandedCard)}\n        activeOpacity={0.7}\n      >\n        <View style={styles.headerLeft}>\n          <View style={styles.titleRow}>\n            <Text style={styles.choreTitle}>{chore.title}</Text>\n            {advancedCard && (\n              <View style={styles.advancedBadge}>\n                <Ionicons name=\"star\" size={12} color=\"#be185d\" />\n                <Text style={styles.advancedText}>Advanced</Text>\n              </View>\n            )}\n          </View>\n          \n          <View style={styles.metadataRow}>\n            <View style={[styles.difficultyBadge, { backgroundColor: getDifficultyColor() }]}>\n              <Text style={styles.difficultyText}>{chore.difficulty}</Text>\n            </View>\n            <View style={[styles.pointsBadge, { backgroundColor: getPointsColor() }]}>\n              <Text style={styles.pointsText}>{chore.points} pts</Text>\n            </View>\n            {chore.estimatedDuration && (\n              <View style={styles.timeBadge}>\n                <Ionicons name=\"time-outline\" size={12} color=\"#6b7280\" />\n                <Text style={styles.timeText}>{chore.estimatedDuration}m</Text>\n              </View>\n            )}\n          </View>\n        </View>\n\n        <View style={styles.headerRight}>\n          <Ionicons \n            name={expandedCard ? \"chevron-up\" : \"chevron-down\"} \n            size={24} \n            color=\"#be185d\" \n          />\n        </View>\n      </TouchableOpacity>\n\n      {/* Certification Status */}\n      {advancedCard?.certification?.required && (\n        <CertificationBadge \n          choreId={chore.id!}\n          userId={currentUserId}\n          certification={advancedCard.certification}\n        />\n      )}\n\n      {/* Expanded Content */}\n      {expandedCard && (\n        <View style={styles.expandedContent}>\n          {/* Description */}\n          {chore.description && (\n            <Text style={styles.description}>{chore.description}</Text>\n          )}\n\n          {/* Educational Content */}\n          <EducationalContent \n            fact={educationalFact}\n            quote={inspirationalQuote}\n            onFactEngagement={() => educationalContentService.trackContentEngagement(\n              educationalFact?.id || '', 'fact', currentUserId\n            )}\n            onQuoteEngagement={() => educationalContentService.trackContentEngagement(\n              inspirationalQuote?.id || '', 'quote', currentUserId\n            )}\n          />\n\n          {/* Action Buttons */}\n          <View style={styles.actionButtons}>\n            {advancedCard && (\n              <TouchableOpacity \n                style={styles.instructionButton}\n                onPress={handleInstructionView}\n              >\n                <Ionicons name=\"list-outline\" size={20} color=\"#ffffff\" />\n                <Text style={styles.buttonText}>Instructions</Text>\n              </TouchableOpacity>\n            )}\n\n            <TouchableOpacity \n              style={styles.performanceButton}\n              onPress={() => setShowPerformance(true)}\n            >\n              <Ionicons name=\"analytics-outline\" size={20} color=\"#ffffff\" />\n              <Text style={styles.buttonText}>History</Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Quality Rating Input (when completing) */}\n          {isCompleting && (\n            <QualityRatingInput \n              onSubmit={handleCompletionSubmit}\n              onPreferenceUpdate={handlePreferenceUpdate}\n              choreTitle={chore.title}\n            />\n          )}\n        </View>\n      )}\n\n      {/* Instruction Modal */}\n      {showInstructions && advancedCard && (\n        <InstructionViewer \n          advancedCard={advancedCard}\n          userAge={userAge}\n          visible={showInstructions}\n          onClose={() => setShowInstructions(false)}\n          onStepComplete={(stepId) => {\n            choreCardService.trackInstructionUsage(chore.id!, currentUserId, stepId);\n          }}\n        />\n      )}\n\n      {/* Performance History Modal */}\n      {showPerformance && (\n        <PerformanceHistory \n          choreId={chore.id!}\n          userId={currentUserId}\n          choreTitle={chore.title}\n          visible={showPerformance}\n          onClose={() => setShowPerformance(false)}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#ffffff',\n    borderRadius: 24,\n    marginHorizontal: 20,\n    marginVertical: 8,\n    shadowColor: '#be185d',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.08,\n    shadowRadius: 12,\n    elevation: 5,\n  },\n  loadingContainer: {\n    padding: 20,\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n    borderRadius: 24,\n    marginHorizontal: 20,\n    marginVertical: 8,\n  },\n  loadingText: {\n    fontSize: 16,\n    color: '#9f1239',\n    fontWeight: '500',\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n  },\n  headerLeft: {\n    flex: 1,\n  },\n  titleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  choreTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#831843',\n    flex: 1,\n  },\n  advancedBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#fbcfe8',\n    paddingHorizontal: 8,\n    paddingVertical: 3,\n    borderRadius: 12,\n    marginLeft: 8,\n  },\n  advancedText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: '#be185d',\n    marginLeft: 3,\n  },\n  metadataRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  difficultyBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 3,\n    borderRadius: 12,\n    marginRight: 8,\n  },\n  difficultyText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  pointsBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 3,\n    borderRadius: 12,\n    marginRight: 8,\n  },\n  pointsText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#ffffff',\n  },\n  timeBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f3f4f6',\n    paddingHorizontal: 8,\n    paddingVertical: 3,\n    borderRadius: 12,\n  },\n  timeText: {\n    fontSize: 11,\n    fontWeight: '500',\n    color: '#6b7280',\n    marginLeft: 3,\n  },\n  headerRight: {\n    marginLeft: 16,\n  },\n  expandedContent: {\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n  },\n  description: {\n    fontSize: 14,\n    color: '#6b7280',\n    lineHeight: 20,\n    marginBottom: 16,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    marginTop: 16,\n    gap: 12,\n  },\n  instructionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#be185d',\n    paddingVertical: 12,\n    borderRadius: 16,\n  },\n  performanceButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#9f1239',\n    paddingVertical: 12,\n    borderRadius: 16,\n  },\n  buttonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#ffffff',\n    marginLeft: 6,\n  },\n});\n\nexport default AdvancedChoreCard;"
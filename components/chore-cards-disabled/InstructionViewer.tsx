import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Modal, TouchableOpacity, ScrollView, Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { AdvancedChoreCard, InstructionSet, AgeGroup } from '../../types';\n\ninterface Props {\n  advancedCard: AdvancedChoreCard;\n  userAge?: number;\n  visible: boolean;\n  onClose: () => void;\n  onStepComplete: (stepId: string) => void;\n}\n\nconst InstructionViewer: React.FC<Props> = ({\n  advancedCard,\n  userAge,\n  visible,\n  onClose,\n  onStepComplete\n}) => {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<Set<string>>(new Set());\n  const [instructions, setInstructions] = useState<InstructionSet | null>(null);\n\n  useEffect(() => {\n    if (visible && advancedCard.instructions) {\n      // Determine age group\n      const ageGroup: AgeGroup = userAge && userAge <= 8 ? 'child' : \n                                 userAge && userAge <= 12 ? 'teen' : 'adult';\n      \n      // Get appropriate instructions\n      const instructionSet = advancedCard.instructions[ageGroup] ||\n                            advancedCard.instructions.adult ||\n                            advancedCard.instructions.teen ||\n                            advancedCard.instructions.child;\n      \n      setInstructions(instructionSet);\n      setCurrentStepIndex(0);\n      setCompletedSteps(new Set());\n    }\n  }, [visible, advancedCard, userAge]);\n\n  const handleStepComplete = (stepId: string) => {\n    const newCompleted = new Set(completedSteps);\n    newCompleted.add(stepId);\n    setCompletedSteps(newCompleted);\n    onStepComplete(stepId);\n\n    // Auto-advance to next step\n    if (instructions && currentStepIndex < instructions.steps.length - 1) {\n      setCurrentStepIndex(currentStepIndex + 1);\n    }\n  };\n\n  const handleStepUncomplete = (stepId: string) => {\n    const newCompleted = new Set(completedSteps);\n    newCompleted.delete(stepId);\n    setCompletedSteps(newCompleted);\n  };\n\n  const goToStep = (index: number) => {\n    setCurrentStepIndex(index);\n  };\n\n  const getSafetyIcon = (level: string) => {\n    switch (level) {\n      case 'caution': return { icon: 'warning-outline', color: '#f59e0b' };\n      case 'warning': return { icon: 'alert-circle-outline', color: '#ef4444' };\n      case 'danger': return { icon: 'skull-outline', color: '#dc2626' };\n      default: return { icon: 'information-circle-outline', color: '#6b7280' };\n    }\n  };\n\n  if (!instructions) {\n    return null;\n  }\n\n  const currentStep = instructions.steps[currentStepIndex];\n  const progress = (completedSteps.size / instructions.steps.length) * 100;\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={onClose}\n    >\n      <View style={styles.container}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n            <Ionicons name=\"close\" size={24} color=\"#831843\" />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Step-by-Step Instructions</Text>\n          <View style={styles.placeholder} />\n        </View>\n\n        {/* Progress Bar */}\n        <View style={styles.progressContainer}>\n          <View style={styles.progressBarBackground}>\n            <View style={[styles.progressBarFill, { width: `${progress}%` }]} />\n          </View>\n          <Text style={styles.progressText}>\n            {completedSteps.size} of {instructions.steps.length} steps completed\n          </Text>\n        </View>\n\n        {/* Safety Warnings */}\n        {instructions.safetyWarnings.length > 0 && (\n          <View style={styles.safetySection}>\n            <Text style={styles.safetyTitle}>‚ö†Ô∏è Safety Information</Text>\n            {instructions.safetyWarnings.map((warning, index) => {\n              const { icon, color } = getSafetyIcon(warning.level);\n              return (\n                <View key={index} style={[styles.safetyWarning, { borderLeftColor: color }]}>\n                  <Ionicons name={icon as any} size={16} color={color} />\n                  <Text style={[styles.safetyText, { color }]}>{warning.message}</Text>\n                </View>\n              );\n            })}\n          </View>\n        )}\n\n        {/* Step Content */}\n        <ScrollView style={styles.stepContent} showsVerticalScrollIndicator={false}>\n          {currentStep && (\n            <View style={styles.stepContainer}>\n              {/* Step Header */}\n              <View style={styles.stepHeader}>\n                <View style={styles.stepNumberContainer}>\n                  <Text style={styles.stepNumber}>{currentStep.stepNumber}</Text>\n                </View>\n                <View style={styles.stepTitleContainer}>\n                  <Text style={styles.stepTitle}>{currentStep.title}</Text>\n                  {currentStep.estimatedMinutes && (\n                    <Text style={styles.stepTime}>~{currentStep.estimatedMinutes} min</Text>\n                  )}\n                </View>\n              </View>\n\n              {/* Step Description */}\n              <Text style={styles.stepDescription}>{currentStep.description}</Text>\n\n              {/* Required Tools */}\n              {currentStep.requiredTools && currentStep.requiredTools.length > 0 && (\n                <View style={styles.toolsSection}>\n                  <Text style={styles.toolsTitle}>üõ†Ô∏è Tools Needed:</Text>\n                  {currentStep.requiredTools.map((tool, index) => (\n                    <Text key={index} style={styles.toolItem}>‚Ä¢ {tool}</Text>\n                  ))}\n                </View>\n              )}\n\n              {/* Safety Note */}\n              {currentStep.safetyNote && (\n                <View style={styles.stepSafetyNote}>\n                  <Ionicons name=\"shield-checkmark\" size={16} color=\"#f59e0b\" />\n                  <Text style={styles.stepSafetyText}>{currentStep.safetyNote}</Text>\n                </View>\n              )}\n\n              {/* Media Assets */}\n              {currentStep.mediaAssets && currentStep.mediaAssets.length > 0 && (\n                <View style={styles.mediaSection}>\n                  {currentStep.mediaAssets.map((asset, index) => (\n                    <View key={index} style={styles.mediaContainer}>\n                      {asset.type === 'image' && (\n                        <Image source={{ uri: asset.url }} style={styles.instructionImage} />\n                      )}\n                      {asset.caption && (\n                        <Text style={styles.mediaCaption}>{asset.caption}</Text>\n                      )}\n                    </View>\n                  ))}\n                </View>\n              )}\n\n              {/* Step Completion */}\n              <View style={styles.stepCompletion}>\n                {completedSteps.has(currentStep.id) ? (\n                  <TouchableOpacity \n                    style={styles.uncompleteButton}\n                    onPress={() => handleStepUncomplete(currentStep.id)}\n                  >\n                    <Ionicons name=\"checkmark-circle\" size={20} color=\"#10b981\" />\n                    <Text style={styles.uncompleteText}>Step Completed</Text>\n                  </TouchableOpacity>\n                ) : (\n                  <TouchableOpacity \n                    style={styles.completeButton}\n                    onPress={() => handleStepComplete(currentStep.id)}\n                  >\n                    <Ionicons name=\"checkmark-circle-outline\" size={20} color=\"#ffffff\" />\n                    <Text style={styles.completeText}>Mark as Complete</Text>\n                  </TouchableOpacity>\n                )}\n              </View>\n            </View>\n          )}\n        </ScrollView>\n\n        {/* Navigation */}\n        <View style={styles.navigation}>\n          <TouchableOpacity \n            style={[styles.navButton, currentStepIndex === 0 && styles.navButtonDisabled]}\n            onPress={() => goToStep(Math.max(0, currentStepIndex - 1))}\n            disabled={currentStepIndex === 0}\n          >\n            <Ionicons name=\"chevron-back\" size={20} color={currentStepIndex === 0 ? \"#d1d5db\" : \"#be185d\"} />\n            <Text style={[styles.navText, currentStepIndex === 0 && styles.navTextDisabled]}>Previous</Text>\n          </TouchableOpacity>\n\n          <View style={styles.stepIndicators}>\n            {instructions.steps.map((_, index) => (\n              <TouchableOpacity\n                key={index}\n                style={[\n                  styles.stepIndicator,\n                  index === currentStepIndex && styles.stepIndicatorActive,\n                  completedSteps.has(instructions.steps[index].id) && styles.stepIndicatorCompleted\n                ]}\n                onPress={() => goToStep(index)}\n              >\n                {completedSteps.has(instructions.steps[index].id) ? (\n                  <Ionicons name=\"checkmark\" size={12} color=\"#ffffff\" />\n                ) : (\n                  <Text style={[\n                    styles.stepIndicatorText,\n                    index === currentStepIndex && styles.stepIndicatorTextActive\n                  ]}>\n                    {index + 1}\n                  </Text>\n                )}\n              </TouchableOpacity>\n            ))}\n          </View>\n\n          <TouchableOpacity \n            style={[\n              styles.navButton, \n              currentStepIndex === instructions.steps.length - 1 && styles.navButtonDisabled\n            ]}\n            onPress={() => goToStep(Math.min(instructions.steps.length - 1, currentStepIndex + 1))}\n            disabled={currentStepIndex === instructions.steps.length - 1}\n          >\n            <Text style={[\n              styles.navText, \n              currentStepIndex === instructions.steps.length - 1 && styles.navTextDisabled\n            ]}>Next</Text>\n            <Ionicons \n              name=\"chevron-forward\" \n              size={20} \n              color={currentStepIndex === instructions.steps.length - 1 ? \"#d1d5db\" : \"#be185d\"} \n            />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fdf2f8',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    paddingBottom: 16,\n    backgroundColor: '#ffffff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#f9a8d4',\n  },\n  closeButton: {\n    padding: 8,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#831843',\n  },\n  placeholder: {\n    width: 40,\n  },\n  progressContainer: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: '#ffffff',\n  },\n  progressBarBackground: {\n    height: 6,\n    backgroundColor: '#f9a8d4',\n    borderRadius: 3,\n    marginBottom: 8,\n  },\n  progressBarFill: {\n    height: '100%',\n    backgroundColor: '#be185d',\n    borderRadius: 3,\n  },\n  progressText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#831843',\n    textAlign: 'center',\n  },\n  safetySection: {\n    backgroundColor: '#ffffff',\n    marginHorizontal: 20,\n    marginVertical: 8,\n    padding: 16,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: '#f59e0b',\n  },\n  safetyTitle: {\n    fontSize: 16,\n    fontWeight: '700',\n    color: '#92400e',\n    marginBottom: 12,\n  },\n  safetyWarning: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    paddingLeft: 12,\n    borderLeftWidth: 3,\n    marginBottom: 8,\n  },\n  safetyText: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginLeft: 8,\n    flex: 1,\n  },\n  stepContent: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  stepContainer: {\n    backgroundColor: '#ffffff',\n    borderRadius: 24,\n    padding: 20,\n    marginVertical: 8,\n  },\n  stepHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  stepNumberContainer: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: '#be185d',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 16,\n  },\n  stepNumber: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#ffffff',\n  },\n  stepTitleContainer: {\n    flex: 1,\n  },\n  stepTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#831843',\n    marginBottom: 4,\n  },\n  stepTime: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#9f1239',\n  },\n  stepDescription: {\n    fontSize: 16,\n    color: '#4b5563',\n    lineHeight: 24,\n    marginBottom: 16,\n  },\n  toolsSection: {\n    backgroundColor: '#f3f4f6',\n    padding: 16,\n    borderRadius: 16,\n    marginBottom: 16,\n  },\n  toolsTitle: {\n    fontSize: 14,\n    fontWeight: '700',\n    color: '#374151',\n    marginBottom: 8,\n  },\n  toolItem: {\n    fontSize: 14,\n    color: '#6b7280',\n    marginBottom: 4,\n    paddingLeft: 8,\n  },\n  stepSafetyNote: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    backgroundColor: '#fef3c7',\n    padding: 12,\n    borderRadius: 12,\n    marginBottom: 16,\n  },\n  stepSafetyText: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#92400e',\n    marginLeft: 8,\n    flex: 1,\n  },\n  mediaSection: {\n    marginBottom: 16,\n  },\n  mediaContainer: {\n    marginBottom: 12,\n  },\n  instructionImage: {\n    width: '100%',\n    height: 200,\n    borderRadius: 16,\n    backgroundColor: '#f3f4f6',\n  },\n  mediaCaption: {\n    fontSize: 12,\n    color: '#6b7280',\n    fontStyle: 'italic',\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  stepCompletion: {\n    alignItems: 'center',\n  },\n  completeButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#be185d',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 20,\n  },\n  completeText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#ffffff',\n    marginLeft: 8,\n  },\n  uncompleteButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f0fdf4',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 20,\n    borderWidth: 2,\n    borderColor: '#10b981',\n  },\n  uncompleteText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#10b981',\n    marginLeft: 8,\n  },\n  navigation: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: '#ffffff',\n    borderTopWidth: 1,\n    borderTopColor: '#f9a8d4',\n  },\n  navButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n  },\n  navButtonDisabled: {\n    opacity: 0.5,\n  },\n  navText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#be185d',\n    marginHorizontal: 4,\n  },\n  navTextDisabled: {\n    color: '#d1d5db',\n  },\n  stepIndicators: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  stepIndicator: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: '#f3f4f6',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginHorizontal: 2,\n  },\n  stepIndicatorActive: {\n    backgroundColor: '#be185d',\n  },\n  stepIndicatorCompleted: {\n    backgroundColor: '#10b981',\n  },\n  stepIndicatorText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#6b7280',\n  },\n  stepIndicatorTextActive: {\n    color: '#ffffff',\n  },\n});\n\nexport default InstructionViewer;"